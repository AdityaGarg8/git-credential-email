#!/usr/bin/env python3
#
# Copyright 2025 Aditya Garg
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#	http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
import base64
import getpass
import keyring
import os
import re
import secrets
import sys

from cryptography.fernet import Fernet
from email import message_from_file
from email.utils import getaddresses
from protonmail import ProtonMail
from protonmail.models import CaptchaConfig

ServiceName = "git-protonmail"

def generate_key():
	return base64.urlsafe_b64encode(secrets.token_bytes(32))

def save_encryption_key(key):
	keyring.set_password(ServiceName, "encryption_key", key.decode())

def load_encryption_key():
	return keyring.get_password(ServiceName, "encryption_key")

def delete_encryption_key():
	keyring.delete_password(ServiceName, "encryption_key")

def encrypt_file(filepath, key):
	with open(filepath, "rb") as f:
		data = f.read()
	fernet = Fernet(key)
	encrypted = fernet.encrypt(data)
	with open(filepath, "wb") as f:
		f.write(encrypted)

def decrypt_file(filepath, key):
	with open(filepath, "rb") as f:
		data = f.read()
	fernet = Fernet(key)
	decrypted = fernet.decrypt(data)
	with open(filepath, "wb") as f:
		f.write(decrypted)

proton = ProtonMail()
if os.name == "nt":
	session_path = os.path.expanduser("~\\.git-protonmail.pickle")
else:
	session_path = os.path.expanduser("~/.git-protonmail.pickle")

if "--authenticate" in sys.argv:
	username = input("Enter your Proton Mail username: ")
	password = getpass.getpass("Enter your Proton Mail password: ")
	try:
		try:
			proton = ProtonMail()
			proton.login(username, password)
		except Exception:
			try:
				proton = ProtonMail()
				proton.login(username, password, captcha_config=CaptchaConfig(type=CaptchaConfig.CaptchaType.PYQT))
			except Exception:
				try:
					proton = ProtonMail()
					proton.login(username, password, captcha_config=CaptchaConfig(type=CaptchaConfig.CaptchaType.MANUAL))
				except Exception as e:
					sys.exit(f"\nAuthentication failed due to \"{e}\".")

		proton.save_session(session_path)
		key = generate_key()
		encrypt_file(session_path, key)
		save_encryption_key(key)
	except Exception as e:
		sys.exit(f"\nAuthentication failed due to \"{e}\".")

elif "-i" in sys.argv:
	if not os.path.exists(session_path):
		sys.exit("No session file found.\nPlease authenticate first by running `git credential-outlook --authenticate`")
	try:
		key = load_encryption_key()
		try:
			decrypt_file(session_path, key.encode())
		except Exception:
			sys.exit("Failed to decrypt session file.\nAuthenticate again by running `git protonmail --authenticate` if you are getting this error multiple times.")
		proton.load_session(session_path, auto_save=True)
		encrypt_file(session_path, key)
	except Exception as e:
		sys.exit(f"Failed to load session file due to \"{e}\".\nAuthenticate again by running `git protonmail --authenticate` if you are getting this error multiple times.")

	msg = message_from_file(sys.stdin)
	parser = argparse.ArgumentParser()
	parser.add_argument('-i', nargs='+', help='Recipient email addresses')
	args, unknown = parser.parse_known_args()
	recipients = args.i if args.i else []
	cc = msg.get_all('Cc', [])
	to = msg.get_all('To', [])
	from_address = msg.get('From', '')
	match = re.match(r'^(.*?)\s*<([^>]+)>$', from_address)
	if match:
		from_address = match.group(2).strip()
	elif from_address.startswith('<') and from_address.endswith('>'):
		from_address = from_address[1:-1]
	to_addresses = [addr for name, addr in getaddresses(to)]
	to_formatted = [f"{name} <{email}>" if name else f"{email}" for name, email in getaddresses(to)]
	cc_addresses = [addr for name, addr in getaddresses(cc)]
	cc_formatted = [f"{name} <{email}>" if name else f"{email}" for name, email in getaddresses(cc)]
	bcc = [r for r in recipients if r not in to_addresses and r not in cc_addresses]
	subject = msg.get('Subject', '')
	body = msg.get_payload(decode=True)
	if isinstance(body, bytes):
		body = body.decode(errors='replace')
	message_id = msg.get('Message-ID', '')
	in_reply_to = msg.get('In-Reply-To', '')

	# Send message
	new_message = proton.create_message(
		recipients=to_formatted,
		cc=cc_formatted,
		bcc=bcc,
		subject=subject,
		body=body,
		external_id=message_id,
		in_reply_to=in_reply_to,
		plain_transfer_encoding='8bit',
	)
	sender_account = next(
		(acc for acc in proton.account_addresses if acc.email == from_address),
		None
	)
	if not sender_account:
		print(f"\"From:\" address {from_address} is not valid.")
		sys.exit(1)

	try:
		proton.send_message(new_message, is_html=False, account_address=sender_account)
	except Exception as e:
		print(f"Failed to send message due to \"{e}\".")
		print("Make sure your \"From:\" address is valid and you have authenticated successfully.")
		sys.exit("Try authenticating again by running `git protonmail --authenticate` if your session has expired or refresh token is invalid.")

elif "--delete-session" in sys.argv:
	exit_error = 0
	try:
		os.remove(session_path)
		print("Session deleted successfully")
	except Exception:
		print("No session file found")
		exit_error = 1

	try:
		delete_encryption_key()
		print("Encryption key deleted from keyring")
	except keyring.errors.PasswordDeleteError:
		print("No encryption key found in keyring")
		exit_error = 1
	
	sys.exit(exit_error)
else:
	print("""
Usage: git protonmail [OPTIONS]

Options:
  --help                 * Show this help message and exit.
  --authenticate         * Authenticate with Proton Mail using its API.
  --delete-session       * Delete the session saved using --authenticate.

Description:
  This script allows you to authenticate with Proton Mail and use the
  Proton Mail API to send emails by acting as a helper for git send-email.

Examples:
  Authenticate using the Proton Mail API:
    git protonmail --authenticate
""")
	sys.exit(0)
