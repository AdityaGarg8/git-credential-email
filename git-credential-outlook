#!/usr/bin/python3
#
# MIT License
#
# Copyright (c) 2025 Aditya Garg
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

from msal import PublicClientApplication
from tempfile import NamedTemporaryFile
import http.server
import os
import sys
import threading
import urllib.parse
import webbrowser
import random
import keyring
import ssl

ClientId = "9e5f94bc-e8a4-4e73-b8be-63364c29d753"
Scopes = ['https://outlook.office.com/POP.AccessAsUser.All','https://outlook.office.com/IMAP.AccessAsUser.All','https://outlook.office.com/SMTP.Send']
ServiceName = "git-credential-outlook"

def save_refresh_token(refresh_token):
    keyring.set_password(ServiceName, "refresh_token", refresh_token)

def load_refresh_token():
    return keyring.get_password(ServiceName, "refresh_token")

app = PublicClientApplication(ClientId)

if not "--authenticate" in sys.argv:

    old_refresh_token = load_refresh_token()

    if old_refresh_token is None:
        sys.exit("No refresh token found.\nPlease authenticate first by running with --authenticate.")

    token = app.acquire_token_by_refresh_token(old_refresh_token,Scopes)

    if 'error' in token:
        print(token)
        sys.exit("Failed to get access token")

    print(f"password={token['access_token']}")
    sys.exit(0)

SERVER_CERT = """-----BEGIN CERTIFICATE-----
MIIDazCCAlOgAwIBAgIUA6YZr8uWMyJFFhX59dkMFHkkO0wwDQYJKoZIhvcNAQEL
BQAwRTELMAkGA1UEBhMCQVUxEzARBgNVBAgMClNvbWUtU3RhdGUxITAfBgNVBAoM
GEludGVybmV0IFdpZGdpdHMgUHR5IEx0ZDAeFw0yNTA0MjcwNTQ5MTNaFw0yNjA0
MjcwNTQ5MTNaMEUxCzAJBgNVBAYTAkFVMRMwEQYDVQQIDApTb21lLVN0YXRlMSEw
HwYDVQQKDBhJbnRlcm5ldCBXaWRnaXRzIFB0eSBMdGQwggEiMA0GCSqGSIb3DQEB
AQUAA4IBDwAwggEKAoIBAQCx1Z9pT26FPWPj1yejMq4x509BS4v7A1QVBz5N3b1Y
MvycbT98LSgBnhNZ/zVgbBSDP9/nNmGn9Xbka+BPaqld4pIWVMcFxc6xChqJxg1/
gPkTWW3A4LRVdCgm+AOqjl+yPUoLqnGg0sdz1q1XIW06JKk4HI51/nZG2d5QolLE
n7tIFPfpSU0SRuGD95dP0B3q7dV60MF6fh4aprLUZRCcZiCxoObC/ENqvPrvKpI1
yz/J8CxughQVyUhxi58swIeyy71p2qdKU+YCsyA3425HYTZsgONRBZYmdvoCwmYr
ZAqakLoSc3h70MPEu4q9vlJUtmtqjWzzvKeZHeO5wcTTAgMBAAGjUzBRMB0GA1Ud
DgQWBBQvZ9wyyC3B9fuzmkoqCEaL3ihAZzAfBgNVHSMEGDAWgBQvZ9wyyC3B9fuz
mkoqCEaL3ihAZzAPBgNVHRMBAf8EBTADAQH/MA0GCSqGSIb3DQEBCwUAA4IBAQB0
NBHVsh6pYTuZQjimrWh/FZB7vQNGOAs5Rvvj8v1bIfxGsVsoCnoP/HbqrtJC4OHy
ERb3qpAKirwRNBzqkXhyYW7kkeuVBgeOBKWjIcYY2QQ1DWfpZmtunHB4XZoFg5g3
Amzg6A8F/DgCqbSZgRM9ITMYIrxOw4WSVf2zOAPkYq/Wu6gl5E/M3eLJjf4xdKAQ
Y1lVoY0qFwQgS4SVZ3HZ7+tN6bsQ/4KI3TmMr5W+jbmmeqQWUOIzQmMozq3x5aDY
+5iY9KEYM3R2mr4dTkzVfpcqJPVsSL1lONcgnY96Ouvf9yGkAfDc7EScKJuTxN71
Qi0uexBnZZjysoxXjgSo
-----END CERTIFICATE-----
"""

SERVER_KEY = """-----BEGIN PRIVATE KEY-----
MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCx1Z9pT26FPWPj
1yejMq4x509BS4v7A1QVBz5N3b1YMvycbT98LSgBnhNZ/zVgbBSDP9/nNmGn9Xbk
a+BPaqld4pIWVMcFxc6xChqJxg1/gPkTWW3A4LRVdCgm+AOqjl+yPUoLqnGg0sdz
1q1XIW06JKk4HI51/nZG2d5QolLEn7tIFPfpSU0SRuGD95dP0B3q7dV60MF6fh4a
prLUZRCcZiCxoObC/ENqvPrvKpI1yz/J8CxughQVyUhxi58swIeyy71p2qdKU+YC
syA3425HYTZsgONRBZYmdvoCwmYrZAqakLoSc3h70MPEu4q9vlJUtmtqjWzzvKeZ
HeO5wcTTAgMBAAECggEACihxKCNM5Vh53bha/8Pz1k7npIurrcVlZqQYx3rch262
JjtJTo8Hw3vjkBb3VhAmZc7eu8bL8juftHGDCRZHIWFBRfxGuAoyAcPZezgwajGU
SKopjkRnmJ//cSZmkzX5umUs1xi/z9dqZDAFi74RjqosblOXQZ8s42QrgkCbaLa8
pXdH6iPsY2mSflkEPpDA7CDUU+edMLBPaSNiu9wrOlG0GrV2mxqvo7HzNgt9zliZ
9r9OFH4z98kXB3BFM85qeIo5AkCKSN6K0vHsiXVtW7nbM/U+oGHZy68XNLaY1/Ia
9/n1e8Ckca0Qtdqw4jShlCkwhOlram9hV77hXQ1elQKBgQDfiPwHJkfFOEeqqPUi
bwCDsIOiS3U7Eqeoc7VJNKiXrKA2+TegKrlzNDyC2bI9Fkb5ok72ktdXxM5cfvA6
VKeKmZYqGPkOURv6wFLI80/GblX1GNqyIMPingWp/FbqKXhfuwpTWdfoBjrCdzK/
fFsS2m0RvA7LMJ7qJYidwJ+/dwKBgQDLqX4f4nCnl/CElKy6umDr/aMq9ncLJ5++
n2Z/LsVA/5MkZp4vM9E+N/dLdn6rGCvu8JhvSAEBl2D3Du6krS2E+56T3WASztTZ
jGLoFOFsEZV3bqF3wNvUUkFQT+EI4Mqb7OY2L/cnH9SNFnTyLHX3T7LJuU2/jcon
giJGsiIUhQKBgEj8Gv3im9Bi/dNU8yTZBVv6CCC3boFpJ+CyVuCeFuXe8TjByk27
ZW2eApvepHmZinb7bbjIXRNFKPO+ZoVFGqcAWq1IFhl8lhwbK2x9NPDfGaW7Bbzf
QdX+Lm8/+sjd3XW0RjzMutgBILJZ5PHsknfnZXFC67mgGGLu+lo3iHElAoGANLku
I4b1bw2QgGIUzUpOqQlCYm7npoWdfzW4zRgIjKkdKIFAVivt8VN/u5Nze0uIpBS5
AaX8TLMpsQu2j/8dF54kEVdv9a6Bv8fuGvK84MM0lHSZbG0K+85HhkkHksrO6MrN
Vh3Yt9Ivrk6v+7my2FFTkZFdJUfJm6y+vtqCpBkCgYAAoTWecpoHbUE1zn+5UXe/
O0BEcDbYLjBk1E+BAynzZDOybZk1MEOOJBz1a2dG69u43i5J22qv9p5jLYUbGUyA
yZ1bBkNxnMXEDhjHmlaAgZDeOG/o61Cerne2Plf6HsFkOi71J0PiO8ssKCqf155R
3n69sna5qvUiKBuWDtpxTQ==
-----END PRIVATE KEY-----
"""

choice = ''
if not "--localhost" in sys.argv and not "--device" in sys.argv:
    print("Choose an authentication method:")
    print("1. Open your browser and login.")
    print("2. Paste a device code manually on a webpage.")
    choice = input("Enter 1 or 2: ").strip()

if choice == "1" or "--localhost" in sys.argv:

    random_port = random.randint(1024, 65535)
    redirect_uri = f"https://localhost:{random_port}/"
    url = app.get_authorization_request_url(Scopes, redirect_uri=redirect_uri)

    # webbrowser.open may fail silently
    print("Navigate to the following url in a web browser, if doesn't open automatically:")
    print(url)
    try:
        webbrowser.open(url)
    except Exception:
        pass

    class Handler(http.server.BaseHTTPRequestHandler):
        def do_GET(self):
            parsed_url = urllib.parse.urlparse(self.path)
            parsed_query = urllib.parse.parse_qs(parsed_url.query)
            global code
            code = next(iter(parsed_query['code']), '')

            response_body = b'Success. Look back at your terminal.\r\n'
            self.send_response(200)
            self.send_header('Content-Type', 'text/plain')
            self.send_header('Content-Length', len(response_body))
            self.end_headers()
            self.wfile.write(response_body)

            global httpd
            t = threading.Thread(target=lambda: httpd.shutdown())
            t.start()


    code = ''

    with NamedTemporaryFile(delete=False, suffix=".cert") as cert_file, NamedTemporaryFile(delete=False, suffix=".key") as key_file:
        cert_file.write(SERVER_CERT.encode())
        key_file.write(SERVER_KEY.encode())
        cert_file_path = cert_file.name
        key_file_path = key_file.name

    server_address = ('', random_port)
    httpd = http.server.HTTPServer(server_address, Handler)
    context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)
    context.load_cert_chain(cert_file_path, key_file_path)
    httpd.socket = context.wrap_socket(
        httpd.socket,
        server_side=True,
    )

    # If we are running over ssh then the browser on the local machine
    # would never be able access localhost:random_port
    if not os.getenv('SSH_CONNECTION'):
        httpd.serve_forever()

    if code == '':
        print('After login, you will be redirected to a blank (or error) page with a url containing an access code. Paste the url below.')
        resp = input('Response url: ')

        i = resp.find('code') + 5
        code = resp[i : resp.find('&', i)] if i > 4 else resp

    token = app.acquire_token_by_authorization_code(code, Scopes, redirect_uri=redirect_uri)

elif choice == "2" or "--device" in sys.argv:

    # Device code flow
    device_flow = app.initiate_device_flow(scopes=Scopes)
    if "error" in device_flow:
        sys.exit(f"Failed to initiate device flow: {device_flow['error_description']}")

    print(f"To authenticate, visit {device_flow['verification_uri']} and enter the code: {device_flow['user_code']}")
    token = app.acquire_token_by_device_flow(device_flow)

else:
    sys.exit("Invalid choice. Please restart the script and choose either 1 or 2.")

if "error" in token:
    print(token)
    sys.exit("Failed to get access token")

print('Saved refresh token to keyring')
save_refresh_token(token['refresh_token'])
