#!/usr/bin/python3
#
# Copyright 2025 Aditya Garg
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#	http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import sys

if "--help" in sys.argv:
	print("""
Usage: git-credential-outlook [OPTIONS]

Options:
  --help               * Show this help message and exit.
  --set-client         * Set the client details to use for authentication.
  --delete-client      * Delete the client details set using --set-client.
  --authenticate       * Authenticate with Outlook using OAuth2.
      --device         * Use device code flow for authentication.
                         Use this option with --authenticate.
      --external-auth  * Authenticate using an external browser.
                         Use this option with --authenticate.
  --delete-token       * Delete the credentials saved using --authenticate.
  --verbose            * Enable verbose logging during authentication.

Description:
  This script allows you to authenticate with Outlook using OAuth2 and
  retrieve access tokens for use with IMAP, POP, and SMTP protocols.

Examples:
  Authenticate using the browser-based flow:
    git-credential-outlook --authenticate

  Authenticate using the device code flow:
    git-credential-outlook --authenticate --device
""")
	sys.exit(0)

import keyring
import os
import urllib.parse

from msal import PublicClientApplication

# https://github.com/mozilla/releases-comm-central/blob/master/mailnews/base/src/OAuth2Providers.sys.mjs
ClientId_Thunderbird = "9e5f94bc-e8a4-4e73-b8be-63364c29d753"
Redirect_URI_Thunderbird = "https://login.microsoftonline.com/common/oauth2/nativeclient"

# https://gitlab.gnome.org/GNOME/evolution-data-server/-/commit/7554d3b95124486ac98d9a5052e069e46242a216
ClientId_Evolution = "cc6e0693-0e26-4220-8322-9d363e308fc6"
Redirect_URI_Evolution = "https://login.microsoftonline.com/common/oauth2/nativeclient"

Scopes = ['https://outlook.office.com/POP.AccessAsUser.All','https://outlook.office.com/IMAP.AccessAsUser.All','https://outlook.office.com/SMTP.Send']
ServiceName = "git-credential-outlook"

def save_refresh_token(refresh_token):
	keyring.set_password(ServiceName, "refresh_token", refresh_token)

def load_refresh_token():
	return keyring.get_password(ServiceName, "refresh_token")

def delete_refresh_token():
	keyring.delete_password(ServiceName, "refresh_token")

def set_client(client_id, redirect_uri):
	keyring.set_password(ServiceName, "client_id", client_id)
	keyring.set_password(ServiceName, "redirect_uri", redirect_uri)

def load_client_id():
	return keyring.get_password(ServiceName, "client_id")

def load_redirect_uri():
	return keyring.get_password(ServiceName, "redirect_uri")

def delete_client():
	keyring.delete_password(ServiceName, "client_id")
	keyring.delete_password(ServiceName, "redirect_uri")

def get_code_from_url(url):
	parsed_url = urllib.parse.urlparse(url)
	parsed_query = urllib.parse.parse_qs(parsed_url.query)
	return parsed_query.get('code', [''])[0]

def get_code_from_device_flow(app, open_browser=False):
	device_flow = app.initiate_device_flow(scopes=Scopes)
	if "error" in device_flow:
		if open_browser:
			raise Exception
		else:
			sys.exit(f"Failed to initiate device flow: {device_flow['error_description']}")

	if open_browser:
		print(f"Enter this code when asked to do so by your browser: \033[1m{device_flow['user_code']}\033[0m\n")
		webbrowser.open(device_flow['verification_uri'])
	else:
		print(f"Visit {device_flow['verification_uri']} on a web browser.\nEnter this code when asked to do so: \033[1m{device_flow['user_code']}\033[0m\n")
	return app.acquire_token_by_device_flow(device_flow)

ClientId = load_client_id()
Redirect_URI = load_redirect_uri()

if ClientId is None:
	ClientId = ClientId_Thunderbird
	Redirect_URI = Redirect_URI_Thunderbird

elif Redirect_URI is None:
	Redirect_URI = 'https://login.microsoftonline.com/common/oauth2/nativeclient'

app = PublicClientApplication(ClientId)

if "--set-client" in sys.argv:
	print("What client details do you want to use?\n")
	print("1. Thunderbird")
	print("2. GNOME Evolution")
	print("3. Use your own custom client details")
	answer = input("\nType the number of your choice and press enter: ")

	if answer == "1":
		ClientId = ClientId_Thunderbird
		Redirect_URI = Redirect_URI_Thunderbird
	elif answer == "2":
		ClientId = ClientId_Evolution
		Redirect_URI = Redirect_URI_Evolution
	elif answer == "3":
		ClientId = input("\nEnter the Client ID: ")
		Redirect_URI = input("Enter the Redirect URI: ")
	else:
		sys.exit("\nInvalid choice")

	set_client(ClientId, Redirect_URI)
	print("\nClient details saved to keyring")

elif "--delete-client" in sys.argv:
	try:
		delete_client()
		print("Client details deleted from keyring")
	except keyring.errors.PasswordDeleteError:
		sys.exit("No client details found in keyring")

elif "--authenticate" in sys.argv:
	if "--device" in sys.argv:
		# Device code flow
		token = get_code_from_device_flow(app)

	else:
		url = app.get_authorization_request_url(Scopes, redirect_uri=Redirect_URI)
		code = ''

		if "--external-auth" in sys.argv:
			# Use external browser for authentication
			print("Navigate to the following url in a web browser:\n")
			print(url)
			print("\nAfter login, you will be redirected to a blank or error page.")
			codeurl = input("Copy the url of that page and paste it here:\n")
			code = get_code_from_url(codeurl)
			print()

		else:
			print("Opening a browser window for authentication...\n")
			try:
				from PyQt6.QtWidgets import QApplication, QMainWindow
				from PyQt6.QtWebEngineWidgets import QWebEngineView
				from PyQt6.QtCore import QUrl, QLoggingCategory
				qt_available = True
			except Exception:
				import webbrowser
				qt_available = False

			if qt_available:
				if "--verbose" in sys.argv:
					loglevel = 0
				else:
					loglevel = 3
					QLoggingCategory("qt.webenginecontext").setFilterRules("*.info=false") # Suppress info logs

				os.environ["QTWEBENGINE_CHROMIUM_FLAGS"] = f"--enable-logging --log-level={loglevel}"

				class BrowserWindow(QMainWindow):

					def handle_url_change(self, url):
						if "code=" in url.toString():
							global code
							code = get_code_from_url(url.toString())
							self.close()

					def __init__(self):
						super().__init__()
						self.setWindowTitle("OAuth2 Login")
						self.resize(800, 600)
						self.browser = QWebEngineView()
						self.setCentralWidget(self.browser)
						self.browser.load(QUrl(url))
						self.browser.urlChanged.connect(self.handle_url_change)
						self.show()

				webapp = QApplication(sys.argv)
				window = BrowserWindow()
				webapp.exec()
				token = app.acquire_token_by_authorization_code(code, Scopes, redirect_uri=Redirect_URI)
			else:
				try:
					# Lets try to use device code flow first
					token = get_code_from_device_flow(app, open_browser=True)
				except Exception:
					webbrowser.open(url)
					print("Authenticate in the browser window that opened.\nAfter login, you will be redirected to a blank or error page.")
					codeurl = input("Copy the url of that page and paste it here:\n")
					code = get_code_from_url(codeurl)
					print()
					token = app.acquire_token_by_authorization_code(code, Scopes, redirect_uri=Redirect_URI)

	if 'error' in token:
		print(token)
		sys.exit("\nFailed to get refresh token")

	print('Saved refresh token to keyring')
	save_refresh_token(token['refresh_token'])

elif "--delete-token" in sys.argv:
	try:
		delete_refresh_token()
		print("Refresh token deleted from keyring")
	except keyring.errors.PasswordDeleteError:
		sys.exit("No refresh token found in keyring")

else:
	old_refresh_token = load_refresh_token()

	if old_refresh_token is None:
		sys.exit("No refresh token found.\nPlease authenticate first by running `git credential-outlook --authenticate`")

	token = app.acquire_token_by_refresh_token(old_refresh_token,Scopes)

	if 'error' in token:
		print(token)
		sys.exit("Failed to get access token")

	print(f"password={token['access_token']}")
	sys.exit(0)
