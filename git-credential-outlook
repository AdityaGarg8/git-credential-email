#!/usr/bin/python3
#
# Copyright 2025 Aditya Garg
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#	http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import sys

if "--help" in sys.argv:
	print("""
Usage: git-credential-outlook [OPTIONS]

Options:
  --help               * Show this help message and exit.
  --authenticate       * Authenticate with Outlook using OAuth2.
      --device         * Use device code flow for authentication.
                         Must be used with --authenticate.
  --verbose            * Enable verbose logging during authentication.

Description:
  This script allows you to authenticate with Outlook using OAuth2 and
  retrieve access tokens for use with IMAP, POP, and SMTP protocols.

Examples:
  Authenticate using the browser-based flow:
    git-credential-outlook --authenticate

  Authenticate using the device code flow:
    git-credential-outlook --authenticate --device
""")
	sys.exit(0)

import keyring
import os
import urllib.parse

from msal import PublicClientApplication

# https://github.com/mozilla/releases-comm-central/blob/master/mailnews/base/src/OAuth2Providers.sys.mjs
ClientId_Thunderbird = "9e5f94bc-e8a4-4e73-b8be-63364c29d753"

# https://gitlab.gnome.org/GNOME/evolution-data-server/-/commit/7554d3b95124486ac98d9a5052e069e46242a216
ClientId_Evolution = "cc6e0693-0e26-4220-8322-9d363e308fc6"

Scopes = ['https://outlook.office.com/POP.AccessAsUser.All','https://outlook.office.com/IMAP.AccessAsUser.All','https://outlook.office.com/SMTP.Send']
ServiceName = "git-credential-outlook"

# ClientId to be used

ClientId = ClientId_Thunderbird

def save_refresh_token(refresh_token):
	keyring.set_password(ServiceName, "refresh_token", refresh_token)

def load_refresh_token():
	return keyring.get_password(ServiceName, "refresh_token")

app = PublicClientApplication(ClientId)

if "--authenticate" in sys.argv:
	if "--device" in sys.argv:

		# Device code flow
		device_flow = app.initiate_device_flow(scopes=Scopes)
		if "error" in device_flow:
			sys.exit(f"Failed to initiate device flow: {device_flow['error_description']}")

		print(f"To authenticate, visit {device_flow['verification_uri']} and enter the code:\n{device_flow['user_code']}\n")
		token = app.acquire_token_by_device_flow(device_flow)

	else:

		from PyQt6.QtWidgets import QApplication, QMainWindow
		from PyQt6.QtWebEngineWidgets import QWebEngineView
		from PyQt6.QtCore import QUrl, QLoggingCategory

		redirect_uri = f"https://login.live.com/oauth20_desktop.srf"

		url = app.get_authorization_request_url(Scopes, redirect_uri=redirect_uri)

		if "--verbose" in sys.argv:
			loglevel = 0
		else:
			loglevel = 3
			QLoggingCategory("qt.webenginecontext").setFilterRules("*.info=false") # Suppress info logs

		os.environ["QTWEBENGINE_CHROMIUM_FLAGS"] = f"--enable-logging --log-level={loglevel}"

		print("Opening a browser window for authentication...\n")

		code = ''

		class BrowserWindow(QMainWindow):

			def handle_url_change(self, url):
				if "code=" in url.toString():
					parsed_url = urllib.parse.urlparse(url.toString())
					parsed_query = urllib.parse.parse_qs(parsed_url.query)
					global code
					code = parsed_query.get('code', [''])[0]
					self.close()

			def __init__(self):
				super().__init__()
				self.setWindowTitle("OAuth2 Login")
				self.resize(800, 600)
				self.browser = QWebEngineView()
				self.setCentralWidget(self.browser)
				self.browser.load(QUrl(url))
				self.browser.urlChanged.connect(self.handle_url_change)
				self.show()

		webapp = QApplication(sys.argv)
		window = BrowserWindow()
		webapp.exec()

		token = app.acquire_token_by_authorization_code(code, Scopes, redirect_uri=redirect_uri)

	if 'error' in token:
		print(token)
		sys.exit("\nFailed to get refresh token")

	print('Saved refresh token to keyring')
	save_refresh_token(token['refresh_token'])

else:

	old_refresh_token = load_refresh_token()

	if old_refresh_token is None:
		sys.exit("No refresh token found.\nPlease authenticate first by running `git credential-outlook --authenticate`")

	token = app.acquire_token_by_refresh_token(old_refresh_token,Scopes)

	if 'error' in token:
		print(token)
		sys.exit("Failed to get access token")

	print(f"password={token['access_token']}")
	sys.exit(0)
